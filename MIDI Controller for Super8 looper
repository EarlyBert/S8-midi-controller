desc:MIDI controller for Super8 looper

// Author: Bert Bouwhuis
// LICENSE: LGPL v2 or later - http://www.gnu.org/licenses/lgpl.html

// General notes:
// To be used together with Reaper's Super8 looper plugin, an external foot pedal (or switch) and
// an optional external midi controller.

in_pin:none;  // we're a midi handling fx only
out_pin:none;

slider1:0<0,3,1{Foot pedal,Foot switch,Both,None}>Foot pedal or foot switch?
slider2:64<0,119,1>Midi cc for foot pedal (input from foot pedal)
slider3:0<0,127,1>Midi value for foot pedal up
slider4:127<0,127,1>Midi value for foot pedal down
slider5:0<0,127,1>Midi note foot switch (input from foot switch)
slider6:0<0,17,1{Same as input,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Midi channel (for output to Super8 FX)?
slider7:36<0,127,1>Super8 rec note (output to Super8 FX)
slider8:37<0,127,1>Super8 ply note (output to Super8 FX)
slider9:0<0,1,1{No,Yes}>External midi controller?
slider10:0<0,127,1>Looper arming note (input from midi controller)
slider11:0<0,127,1>Looper playing note (input from midi controller)
slider12:0<0,1,1{No,Yes}>Midi pass through (all input to output)?

@init
ext_noinit = 1.0; // don't initialize at playback start/stop since we don't want to loose current state
// constant definitions (states and events)
s_idle=0;
s_arm_pad_is_on = 1;
s_armed_and_playing = 2;
s_looper_is_recording = 3;
s_looper_is_playing = 4;
e_arm_pad_going_on = 1;
e_arm_pad_going_off = 2;
e_play_pad_going_on = 3;
e_play_pad_going_off = 4;
e_pedal_or_switch_activated = 5;

// initialization
s_new = s_current = s_idle;
pedal_is_down = 0;
prev_ui_ext_contr = -1;

//--------------------------------------------------------------------------------------------------------------

// support function for handling both foot pedal cases: pedal down value either > or < pedal up value

function between(input_value, first, second) local(return_value)
(
  first < second ? (
    return_value = input_value >= first && input_value <= second;
    ) : (
    return_value = input_value <= first && input_value >= second;
  );
  return_value;
);

// support function to check for - and filter multiple - "pedal going down" events

function pedal_going_down() local(return_value)
(
  return_value = 0;
  pedal_is_down ? (
    msg == 0xB0 && no == ui_cc_pedal && between(val, pedal_middle, ui_pedal_up) ? (
      pedal_is_down = 0;
    );
  ) : (
    msg == 0xB0 && no == ui_cc_pedal && between(val, pedal_middle, ui_pedal_down) ? (
      return_value = 1;
      pedal_is_down = 1;
    );
  );
  return_value;
);

// support function to check for  "foot switch activated" event

function foot_switch_activated()
(
  no == ui_note_foot_switch && (msg == 0x90 || msg == 0x80);
);

// support function for sending on-off notes

function send_on_off (note)
(
  midisend(ofs, 0x90 | ch, note | 64 << 8);
  midisend(ofs, 0x80 | ch, note | 0x4000); 
);

//-------------------------------------------------------------------------------------------------------------

@slider

// here initially and if user changes one or more slider values

ui_pedal_or_switch = slider1;
ui_cc_pedal = slider2;
ui_pedal_up = slider3;
ui_pedal_down = slider4;
ui_note_foot_switch = slider5;
ui_output_channel = slider6;
ui_note_start_looper = slider7;
ui_note_play_looper = slider8;
ui_ext_contr = slider9;
ui_note_arm_pad = slider10;
ui_note_play_pad = slider11;
ui_pass_through = slider12;

// if ui_external_controller just changed, force the correct starting state (either idle or armed_and_playing)

(ui_ext_contr !== prev_ui_ext_contr) ?
 (prev_ui_ext_contr = ui_ext_contr; ui_ext_contr ? (s_current = s_idle) : (s_current = s_armed_and_playing); s_new = s_current);

//-------------------------------------------------------------------------------------------------------------

@block
pedal_middle = floor((ui_pedal_down + ui_pedal_up)/2);      // this is the threshold valaue for the foot pedal

while(
  midirecv(ofs, msg1, msg23) ? (
  // if required, pass through without changes to next fx in chain
  ui_pass_through ? (midisend(ofs, msg1, msg23));
  // deconstruct midi message
  msg = msg1 & 0xF0;
  ch = msg1 & 0x0F;
  no = msg23 & 0x7F;
  val = msg23 >> 8;
  ui_output_channel ? (no = ui_output_channel - 1);
  /*

  Finite state machine diagram

                      | arm_pad_going_on             | arm_pad_going_off            | play_pad_going_on            | play_pad_going_off            | pedal_or_switch_activated      |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|
  idle                | new state: arm_pad_is_on     |                              | action: send ply note to S8  |                               |                                |
                      |                              |                              | new state: looper_is_playing |                               |                                |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|
  arm_pad_is_on       |                              | new state: idle              | action: send ply note to S8  |                               |                                |
                      |                              |                              | new state: armed_and_playing |                               |                                |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|
  armed_and_playing   |                              | new state: looper_is_playing |                              | action: send ply note to S8   | action: send rec note to S8    |
                      |                              |                              |                              | new state: arm_pad_is_on      | new state: looper_is_recording |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|
  looper_is_recording |                              | action: send ply note to S8  |                              | action: send two ply notes to | action: send ply note to S8    |
                      |                              | new state: looper_is_playing |                              | S8 (stop recording and stop   | new state: armed_and_playing   |
                      |                              |                              |                              | playing)                      |                                |
                      |                              |                              |                              | new state: arm_pad_is_on      |                                |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|
  looper_is_playing   | new state: armed_and_playing |                              |                              | action: send ply note to S8   |                                |
                      |                              |                              |                              | new state: idle               |                                |
  --------------------|------------------------------|------------------------------|------------------------------|-------------------------------|--------------------------------|

  */
  //
  // what event just occured?
  //
  event = 0;
  ui_ext_contr ? (
    no == ui_note_arm_pad && msg == 0x90 ? (event = e_arm_pad_going_on);
    no == ui_note_arm_pad && msg == 0x80 ? (event = e_arm_pad_going_off);
    no == ui_note_play_pad && msg == 0x90 ? (event = e_play_pad_going_on);
    no == ui_note_play_pad && msg == 0x80 ? (event = e_play_pad_going_off);
  );
  ui_pedal_or_switch == 0 ? (pedal_going_down() ? (event = e_pedal_or_switch_activated));
  ui_pedal_or_switch == 1 ? (foot_switch_activated() ? (event = e_pedal_or_switch_activated));
  ui_pedal_or_switch == 2 ? ((pedal_going_down() || foot_switch_activated()) ? (event = e_pedal_or_switch_activated));
  //
  // determine what to do based on current state
  //
  s_current == s_idle ? (
    event == e_arm_pad_going_on ? (s_new = s_arm_pad_is_on);
    event == e_play_pad_going_on ? (send_on_off(ui_note_play_looper); s_new = s_looper_is_playing);
  );
  s_current == s_arm_pad_is_on ? (
    event == e_arm_pad_going_off ? (s_new = s_idle);
    event == e_play_pad_going_on ? (send_on_off(ui_note_play_looper); s_new = s_armed_and_playing);
  );
  s_current == s_armed_and_playing ? (
    event == e_arm_pad_going_off ? (s_new = s_looper_is_playing);
    event == e_play_pad_going_off ? (send_on_off(ui_note_play_looper); s_new = s_arm_pad_is_on);
    event == e_pedal_or_switch_activated ? (send_on_off(ui_note_start_looper); s_new = s_looper_is_recording);
  );
  s_current == s_looper_is_recording ? (
    event == e_arm_pad_going_off ? (send_on_off(ui_note_play_looper); s_new = s_looper_is_playing);
    event == e_play_pad_going_off ? (send_on_off(ui_note_play_looper); send_on_off(ui_note_play_looper); s_new = s_arm_pad_is_on);
    event == e_pedal_or_switch_activated ? (send_on_off(ui_note_play_looper); s_new = s_armed_and_playing);
  );
  s_current == s_looper_is_playing ? (
    event == e_arm_pad_going_on ? (s_new = s_armed_and_playing);
    event == e_play_pad_going_off) ? (send_on_off(ui_note_play_looper); s_new = s_idle);
  s_current = s_new;
  );
);

